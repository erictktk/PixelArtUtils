{"version":3,"file":"index.js","sources":["../../src/BlendModes.js","../../src/PixelUtils.js","../../src/PixelArray.js","../../src/Composition.js","../../src/HSVUtils.js","../../src/OldComposition.js","../../src/PixelArrayLoading.js","../../src/PixelArrayResizing.js","../../src/Islands.js"],"sourcesContent":["/**\r\n * \r\n * @param {Array<Int>} color \r\n * @returns {Array<Float>}\r\n */\r\nfunction getParamColor(color) {\r\n  return [color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255];\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array<Float>} paramColor \r\n * @returns {Array<int>}\r\n */\r\nfunction get32Color(paramColor) {\r\n  return [\r\n    Math.round(paramColor[0] * 255),\r\n    Math.round(paramColor[1] * 255),\r\n    Math.round(paramColor[2] * 255),\r\n    Math.round(paramColor[3] * 255)\r\n  ];\r\n}\r\n\r\n/** Default blend mode\r\n * \r\n * @param {Array<Number>} color1 \r\n * @param {Array<Number>} color2 \r\n * @returns {Array<Number>}\r\n */\r\nexport function Over(color1, color2) {\r\n  //e = (etop*atop + ebottom*abottom(1-atop)))  / divisor\r\n  //color2 == top\r\n  var pColor1 = getParamColor(color1);\r\n  var pColor2 = getParamColor(color2);\r\n\r\n  //console.log(pColor1);\r\n\r\n  var a1 = pColor1[3];\r\n  var a2 = pColor2[3];\r\n\r\n  var divisor = a2 + a1 * (1 - a2);\r\n  var r = (pColor2[0] * a2 + pColor1[0] * a1 * (1 - a2)) / divisor;\r\n  var g = (pColor2[1] * a2 + pColor1[1] * a1 * (1 - a2)) / divisor;\r\n  var b = (pColor2[2] * a2 + pColor1[2] * a1 * (1 - a2)) / divisor;\r\n  var a = a2 + a1 * (1 - a2);\r\n\r\n  //console.log(\"r = \" + r);\r\n\r\n  return get32Color([r, g, b, a]);\r\n}\r\n\r\n/** Over with custom alpha multiplier (which is independent)\r\n * \r\n * @param {number} customAlphaMultiplier\r\n * @returns {Array[number]}\r\n */\r\nexport function OverCustomAlpha(color1, color2, customAlphaMultiplier = 0.5) {\r\n  //e = (etop*atop + ebottom*abottom(1-atop)))  / divisor\r\n  //color2 == top\r\n  var pColor1 = getParamColor(color1);\r\n  var pColor2 = getParamColor(color2);\r\n\r\n  //console.log(pColor1);\r\n\r\n  var a1 = pColor1[3];\r\n  var a2 = Math.round(pColor2[3]) * customAlphaMultiplier;\r\n\r\n  var divisor = a2 + a1 * (1 - a2);\r\n  var r = (pColor2[0] * a2 + pColor1[0] * a1 * (1 - a2)) / divisor;\r\n  var g = (pColor2[1] * a2 + pColor1[1] * a1 * (1 - a2)) / divisor;\r\n  var b = (pColor2[2] * a2 + pColor1[2] * a1 * (1 - a2)) / divisor;\r\n  var a = a2 + a1 * (1 - a2);\r\n\r\n  return get32Color([r, g, b, a]);\r\n}\r\n\r\n\r\nexport function OverCustomAlphaExport(customAlphaMultiplier) {\r\n  return (a, b) => OverCustomAlpha(a, b, customAlphaMultiplier);\r\n}\r\n\r\n\r\n/** Overlay blend mode\r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @param {Number|null} customAlpha blend from 0 to 1 if not null\r\n * @returns {Array<Int>}\r\n */\r\nexport function Overlay(color1, color2, customAlpha=null) {\r\n  var p1 = getParamColor(color1);\r\n  var p2 = getParamColor(color2);\r\n\r\n  var newColor = [];\r\n  var valueUnit = null;\r\n  var min = null;\r\n  for (var i = 0; i < 3; i += 1) {\r\n    if (p1[i] > 0.5) {\r\n      valueUnit = (p2[i] - p1[i]) / 0.5;\r\n      min = p1[i] - (p2[i] - p1[i]);\r\n      newColor.push(p2[i] * valueUnit + min);\r\n    } else {\r\n      valueUnit = p1[i] / 0.5;\r\n      newColor.push(p2[i] * valueUnit);\r\n    }\r\n  }\r\n\r\n  var r = newColor[0];\r\n  var g = newColor[1];\r\n  var b = newColor;\r\n  var color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    //alpha blending\r\n    color32[3] = color2[3];\r\n    if (customAlpha !== null){\r\n      return OverCustomAlpha(color1, color32, customAlpha);\r\n    }\r\n    else{\r\n      return Over(color1, color32);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** Screen overlay mode\r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function Screen(color1, color2) {\r\n  var p1 = getParamColor(color1);\r\n  var p2 = getParamColor(color2);\r\n\r\n  var r = 1 - (1 - p1[0]) * (1 - p2[0]);\r\n  var g = 1 - (1 - p1[1]) * (1 - p2[1]);\r\n  var b = 1 - (1 - p1[2]) * (1 - p2[2]);\r\n\r\n  var color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    //alpha blending\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Multiply color mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function Multiply(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = p1[0] * p2[0];\r\n  const g = p1[1] * p2[1];\r\n  const b = p1[2] * p2[2];\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Difference blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function Difference(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = Math.abs(p1[0] - p2[0]);\r\n  const g = Math.abs(p1[1] - p2[1]);\r\n  const b = Math.abs(p1[2] - p2[2]);\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Darken blend mode\r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function Darken(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = Math.min(p1[0], p2[0]);\r\n  const g = Math.min(p1[1], p2[1]);\r\n  const b = Math.min(p1[2], p2[2]);\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Lighten blend mode\r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function Lighten(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = Math.max(p1[0], p2[0]);\r\n  const g = Math.max(p1[1], p2[1]);\r\n  const b = Math.max(p1[2], p2[2]);\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** SoftLight blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function SoftLight(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = (1 - 2 * p2[0]) * p1[0] * p1[0] + 2 * p2[0] * p1[0];\r\n  const g = (1 - 2 * p2[1]) * p1[1] * p1[1] + 2 * p2[1] * p1[1];\r\n  const b = (1 - 2 * p2[2]) * p1[2] * p1[2] + 2 * p2[2] * p1[2];\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Hard Light blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function HardLight(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = (p2[0] < 0.5) ? (2 * p1[0] * p2[0]) : (1 - 2 * (1 - p1[0]) * (1 - p2[0]));\r\n  const g = (p2[1] < 0.5) ? (2 * p1[1] * p2[1]) : (1 - 2 * (1 - p1[1]) * (1 - p2[1]));\r\n  const b = (p2[2] < 0.5) ? (2 * p1[2] * p2[2]) : (1 - 2 * (1 - p1[2]) * (1 - p2[2]));\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Color Dodge blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function ColorDodge(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = (p2[0] === 1) ? 1 : Math.min(1, p1[0] / (1 - p2[0]));\r\n  const g = (p2[1] === 1) ? 1 : Math.min(1, p1[1] / (1 - p2[1]));\r\n  const b = (p2[2] === 1) ? 1 : Math.min(1, p1[2] / (1 - p2[2]));\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Color Burn blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function ColorBurn(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = (p2[0] === 0) ? 0 : 1 - Math.min(1, (1 - p1[0]) / p2[0]);\r\n  const g = (p2[1] === 0) ? 0 : 1 - Math.min(1, (1 - p1[1]) / p2[1]);\r\n  const b = (p2[2] === 0) ? 0 : 1 - Math.min(1, (1 - p1[2]) / p2[2]);\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n\r\n/** Pin Light blend mode \r\n * \r\n * @param {Array<Int>} color1 \r\n * @param {Array<Int>} color2 \r\n * @returns {Array<Int>}\r\n */\r\nexport function PinLight(color1, color2) {\r\n  const p1 = getParamColor(color1);\r\n  const p2 = getParamColor(color2);\r\n\r\n  const r = (p2[0] < 0.5) ? Math.min(p1[0], 2 * p2[0]) : Math.max(p1[0], 2 * p2[0] - 1);\r\n  const g = (p2[1] < 0.5) ? Math.min(p1[1], 2 * p2[1]) : Math.max(p1[1], 2 * p2[1] - 1);\r\n  const b = (p2[2] < 0.5) ? Math.min(p1[2], 2 * p2[2]) : Math.max(p1[2], 2 * p2[2] - 1);\r\n\r\n  const color32 = get32Color([r, g, b, 1]);\r\n  if (color2[3] >= 254) {\r\n    return color32;\r\n  } else {\r\n    color32[3] = color2[3];\r\n    return Over(color1, color32);\r\n  }\r\n}\r\n","//#region OffsetUtils\r\nexport function moveRightProtected(index, width, height){\r\n    var next = index + 1;\r\n    if (next >= width){\r\n      return null;\r\n    }\r\n    \r\n    return index\r\n  }\r\n  \r\nexport function moveLeftProtected(index, width, height){\r\n  if (index - 1 < 0){\r\n    return null;\r\n  }\r\n  return index-1;\r\n}\r\n\r\nexport function moveDown(index, imageDataWidth){\r\n  return index += imageDataWidth*4;\r\n}\r\n\r\nexport function moveUp(index, imageDataWidth){\r\n  return index -= imageDataWidth*4;\r\n}\r\n\r\nexport function moveLeft(index, imageDataWidth){\r\n  return index -=4;\r\n}\r\n\r\nexport function moveRight(index, imageDataWidth){\r\n  return index += 4;\r\n}\r\n\r\nexport function moveDiagUpLeft(index, imageDataWidth){\r\n  return index -= (imageDataWidth*4 - 4);\r\n}\r\n\r\nexport function moveDiagUpRight(index, imageDataWidth){\r\n  return index -= (imageDataWidth*4 + 4);\r\n}\r\n\r\nexport function moveDiagDownRight(index, imageDataWidth){\r\n  return index += imageDataWidth*4 + 4;\r\n}\r\n\r\nexport function moveDiagDownLeft(index, imageDataWidth){\r\n  return index += imageDataWidth*4 - 4;\r\n}\r\n//#endregion\r\n\r\n\r\n//#region Single\r\nexport function getSingleIndex(x, y, imagedataWidth){\r\n  return (x+y*imagedataWidth);\r\n}\r\n\r\nexport  function getSingleValue(x, y, imagedataWidth, array){\r\n  return array[x+y*imagedataWidth];\r\n}\r\n\r\nexport  function setSingleValue(x, y, width, array, value){\r\n  array[getSingleIndex(x, y, width)] = value;\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n//#region Color\r\nexport function getIndex(x, y, imagedataWidth){\r\n  return (x + y * imagedataWidth) * 4;\r\n}\r\n\r\n/** Sets color value in a Uint8Array\r\n * \r\n * @param {Uint8Array} array \r\n * @param {Array<int>} value \r\n */\r\nexport function setColorValue(x, y, width, array, value){\r\n  var index = getIndex(x, y, width);\r\n  array[index+0] = value[0];\r\n  array[index+1] = value[1];\r\n  array[index+2] = value[2];\r\n  array[index+3] = value[3];\r\n}\r\n\r\n/** Sets color value in a Uint8Array, checks for width and height\r\n * \r\n * @param {Uint8Array} array \r\n * @param {Array<int>} value \r\n */\r\nexport function setColorValueProtected(x, y, width, height, array, value){\r\n  if( x >= width || x < 0){\r\n    return;\r\n  }\r\n  else if (y >= height || y < 0){\r\n    return;\r\n  }\r\n  setColorValue(x, y, width, array, value);\r\n}\r\n\r\nexport function getColorIndex(x, y, imagedataWidth){\r\n  return getIndex(x, y, imagedataWidth);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Uint8ClampedArray} array \r\n * @returns \r\n */\r\nexport function getColorValue(x, y, width, array){\r\n  var index = getIndex(x, y, width);\r\n  return [array[index], array[index+1], array[index+2], array[index+3]];\r\n}\r\n\r\n/**\r\n* @param {Uint8ClampedArray} array\r\n*/\r\nexport function setPixelXOffset(x, y, offset, color, imagedataWidth, imagedataHeight, array, testForAlpha=false){\r\n  let newX = x+offset;\r\n  if (newX >= imagedataWidth){\r\n    return null;\r\n  }\r\n  if (newX < 0){\r\n    return null;\r\n  }\r\n  \r\n  let index = getIndex(newX, y);\r\n  \r\n  if (testForAlpha){\r\n    if (array[index+3] = 0){\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  array[index+0] = color[0];\r\n  array[index+1] = color[1];\r\n  array[index+2] = color[2];\r\n  array[index+3] = color[3];\r\n  \r\n}\r\n//#endregion","/**\r\n * A class that acts as a wrapper for a Uint8ClampedArray that represents an RGBA image.\r\n */\r\n\r\nclass PixelArray {\r\n  constructor(array, initWidth, initHeight = null, xPos = 0, yPos = 0) {\r\n    if (array !== null) {\r\n      this.array = array;\r\n    } else {\r\n      this.array = new Uint8ClampedArray(initWidth * initHeight * 4);\r\n    }\r\n\r\n    this.width = initWidth;\r\n\r\n    if (initWidth !== null) {\r\n      this.height = this.array.length / (initWidth * 4);\r\n    } else {\r\n      this.height = initHeight;\r\n    }\r\n    this.xPos = xPos;\r\n    this.yPos = yPos;\r\n\r\n    this.xMin = xPos;\r\n    this.xMax = xPos + this.width;\r\n    this.yMin = yPos;\r\n    this.yMax = yPos + this.height;\r\n\r\n    //this.bounds = new Utils.Bounds(this.array, initWidth);\r\n  }\r\n  \r\n  xOffset(){\r\n    return this.xPos;\r\n  }\r\n\r\n  yOffset(){\r\n    return this.yPos;\r\n  }\r\n\r\n  //alias\r\n  get arr() {\r\n    return this.array;\r\n  }\r\n\r\n  getIndex(x, y) {\r\n    return (x + y * this.width) * 4;\r\n  }\r\n\r\n/**\r\n * \r\n * @param {Int} x \r\n * @param {Int} y \r\n * @param {Array<int>} value \r\n */\r\n  setColorValue(x, y, value) {\r\n    var index = this.getIndex(x, y);\r\n    this.array[index + 0] = value[0];\r\n    this.array[index + 1] = value[1];\r\n    this.array[index + 2] = value[2];\r\n    this.array[index + 3] = value[3];\r\n  }\r\n\r\n\r\n  clip(x1, y1, x2, y2){\r\n    for(let i = 0; i < this.width; i += 1){\r\n      for(let j = 0; j < this.height; j += 1){\r\n        if (i < x1 || i >= x2 || j < y1 || j >= y2){\r\n          this.setColorValue(i, j, [0, 0, 0, 0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  copyFromArr(arr) {\r\n    for (let i = 0; i < this.arr.length; i += 1) {\r\n      this.arr[i] = arr[i];\r\n    }\r\n  }\r\n\r\n  /** Makes a deep copy of a PixelArray\r\n   *\r\n   * @param {PixelArray} oldPixelArray\r\n   * @returns {PixelArray}\r\n   */\r\n  static CopyPixelFactory(oldPixelArray) {\r\n    //console.log(oldPixelArray.array);\r\n    const copyArray = Uint8ClampedArray.from(oldPixelArray.array);\r\n    return new PixelArray(\r\n      copyArray,\r\n      oldPixelArray.width,\r\n      oldPixelArray.height,\r\n      oldPixelArray.xPos,\r\n      oldPixelArray.yPos\r\n    );\r\n  }\r\n\r\n  /** Copys a Utin8ClampedArray, then puts it into a new PixelArray\r\n   * \r\n   * @param {Uint8ClampedArray} array\r\n   * @returns {PixelArray}\r\n   */\r\n  static CopyFactory(array, width) {\r\n    const copyArray = Uint8ClampedArray.from(array);\r\n    return new PixelArray(copyArray, width);\r\n  }\r\n\r\n\r\n  /** Copy another PixelArray into this one\r\n   * \r\n   * @param {PixelArray} otherPixelArray \r\n   * @param {Array<Int>} bounds \r\n   * @param {Int} xOffset \r\n   * @param {Int} yOffset \r\n   */\r\n  copyInto(otherPixelArray, bounds, xOffset=0, yOffset=0){\r\n    for(let i = bounds[0]; i < bounds[2]; i += 1){\r\n      for(let j = bounds[1]; j < bounds[3]; j += 1){\r\n        const curValue = otherPixelArray.getColorValue(i, j);\r\n        this.setColorValue(i+xOffset, j+yOffset, curValue);\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  /**Fills a pixel array with a color\r\n   *\r\n   * @param {Array<number>} color\r\n   */\r\n  fill(color) {\r\n    for (let i = 0; i < this.width; i += 1) {\r\n      for (let j = 0; j < this.height; j += 1) {\r\n        this.setColorValue(i, j, color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Fills a box with color\r\n   *\r\n   */\r\n  fillBox(color, x1, x2, y1, y2) {\r\n    for (let i = x1; i < x2; i += 1) {\r\n      for (let j = y1; j < y2; j += 1) {\r\n        this.setColorValue(i, j, color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fills the pixel array with a specific color if passes alphaMin \r\n   */\r\n  fillColorValue(color, alphaMin=200){\r\n    for(let i = 0; i < this.width; i += 1){\r\n      for(let j = 0; j < this.height; j += 1){\r\n        if (this.getColorValue(i, j)[3] > alphaMin){\r\n          this.setColorValue(i, j, color);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Array<int>\r\n   */\r\n  getColorValue(x, y) {\r\n    var index = this.getIndex(x, y);\r\n    return [\r\n      this.array[index + 0],\r\n      this.array[index + 1],\r\n      this.array[index + 2],\r\n      this.array[index + 3]\r\n    ];\r\n  }\r\n\r\n  /** Gets first found color from pixelArray\r\n   * @returns {Array<Int>|null}\r\n   */\r\n  getFirstFoundColor(){\r\n    for(let i = 0; i < this.width; i += 1){\r\n        for(let j = 0; j < this.height; j += 1){\r\n            //\r\n            const color = this.getColorValue(i, j);\r\n            if (color[3] >= 1){\r\n                return color;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Draws PixelArray to specified canvas element\r\n   * \r\n   * @param {HTMLCanvasElement} canvas \r\n   */\r\n  toCanvas(canvas){\r\n    /**@type{HTMLCanvasElement} */\r\n    const context = canvas.getContext(\"2d\");\r\n    const imgData = new ImageData(this.arr, this.width);\r\n    context.putImageData(imgData, 0, 0);\r\n  }\r\n}\r\n\r\nexport { PixelArray };\r\n","import { getColorValue, setColorValue } from './PixelUtils.js';\r\n//import * as Utils from './Utils.js';\r\nimport * as BlendModes from './BlendModes.js';\r\nimport {PixelArray} from \"./PixelArray.js\";\r\nimport * as PixelUtils from \"./PixelUtils.js\";\r\n//import * as BlendMaskModes from \"./BlendMaskModes.js\";\r\n\r\n\r\n  class BoundsHelperObject{\r\n    constructor(startI, startJ, endX, endY, length, height){\r\n      this.startI = startI;\r\n      this.startJ = startJ;\r\n      this.endX = endX;\r\n      this.endY = endY;\r\n      this.length = length;\r\n      this.height = height;\r\n    }\r\n  }\r\n  \r\n  function getBoundsForComp(pArray1, pArray2){\r\n    var x1 = pArray1.xPos;\r\n    var x2 = pArray2.xPos;\r\n    var y1 = pArray1.yPos;\r\n    var y2 = pArray2.yPos;\r\n    var xOffset = x1-x2;\r\n    var yOffset = y1-y2;\r\n    var width1 = pArray1.width;\r\n    var height1 = pArray1.height;\r\n    var width2 = pArray2.width;\r\n    var height2 = pArray2.height;\r\n    \r\n    var startI = Math.max(0, x2-x1);\r\n    var startJ = Math.max(0, y2-y1);\r\n    var endX = Math.min(x1+pArray1.width, x2+pArray2.width);\r\n    var length = Math.max(0, x1-endX);\r\n    var endY = Math.min(y1+pArray1.height, y2+pArray2.height);\r\n    var height = Math.max(0, y1-endY);\r\n    \r\n    return new BoundsHelperObject(startI, startJ, endX, endY, length, height);\r\n  }\r\n  \r\n\r\n  /**\r\n   * \r\n   * @param {PixelArray} pArray \r\n   * @param {int} xOffset \r\n   * @param {int} yOffset \r\n   * @returns {PixelArray}\r\n   */\r\n  export function Offset(pArray, xOffset, yOffset){\r\n    const offsetPArray = new PixelArray(null, pArray.width, pArray.height);\r\n    let width = pArray.width;\r\n    let height = pArray.height;\r\n    let newArr = offsetPArray.array;\r\n    let oldArr = pArray.array;\r\n    let rgba = [];\r\n    for(let i = 0; i < pArray.width; i += 1){\r\n      for(let j = 0; j < pArray.height; j += 1){\r\n        rgba = PixelUtils.getColorValue((i+xOffset)%width, (j+yOffset)%height, width, oldArr);\r\n        PixelUtils.setColorValue(i, j, width, newArr, rgba);\r\n      }\r\n    }\r\n\r\n    return offsetPArray;\r\n  }\r\n  \r\n  function scaleImageData(imageData, scale) {\r\n      var scaled = ctx.createImageData(imageData.width * scale, imageData.height * scale);\r\n      var subLine = ctx.createImageData(scale, 1).data\r\n      for (var row = 0; row < imageData.height; row++) {\r\n          for (var col = 0; col < imageData.width; col++) {\r\n              var sourcePixel = imageData.data.subarray(\r\n                  (row * imageData.width + col) * 4,\r\n                  (row * imageData.width + col) * 4 + 4\r\n              );\r\n              for (var x = 0; x < scale; x++) subLine.set(sourcePixel, x*4)\r\n              for (var y = 0; y < scale; y++) {\r\n                  var destRow = row * scale + y;\r\n                  var destCol = col * scale;\r\n                  scaled.data.set(subLine, (destRow * scaled.width + destCol) * 4)\r\n              }\r\n          }\r\n      }\r\n  \r\n      return scaled;\r\n  }\r\n\r\n  function blendColorTransform(pArray1, pArray2, xMove=0, yMove=0, blendOp=null, newArray=null){\r\n    pArray2.xPos = pArray2.xPos + xMove;\r\n    pArray2.yPos = pArray2.yPos + yMove;\r\n    var theArray = blendColorLayers(pArray1, pArray2, blendOp, newArray);\r\n    pArray2.xPos = pArray2.xPos - xMove;\r\n    pArray2.yPos = pArray2.yPos - yMove;\r\n    return theArray;\r\n  }\r\n\r\n    /**\r\n   *  pArray1 is bottom, pArray2 is top\r\n   * @param {PixelArray} pArray1\r\n   * @param {PixelArray} pArray2 \r\n   * @param {*} blendOp \r\n   * @param {Uint8ClampedArray} newArray \r\n   * @param {*} xMove \r\n   * @param {*} yMove \r\n   * @returns {PixelArray}\r\n   */\r\n  export function blendColorLayersPArray(pArray1, pArray2, blendOp=null, newArray=null, xMove=0, yMove=0){\r\n    const resultArray = blendColorLayers(pArray1, pArray2, blendOp, newArray, xMove, yMove)\r\n    return new PixelArray(resultArray, pArray1.width);\r\n  }\r\n  \r\n  /**\r\n   *  pArray1 is bottom, pArray2 is top\r\n   * @param {PixelArray} pArray1\r\n   * @param {PixelArray} pArray2 \r\n   * @param {*} blendOp \r\n   * @param {Uint8ClampedArray} newArray \r\n   * @param {*} xMove \r\n   * @param {*} yMove \r\n   * @returns {Uint8ClampedArray}\r\n   */\r\n  function blendColorLayers(pArray1, pArray2, blendOp=null, newArray=null, xMove=0, yMove=0, mask=null){\r\n    pArray2.xPos = pArray2.xPos + xMove;\r\n    pArray2.yPos = pArray2.yPos + yMove;\r\n\r\n    var x1 = pArray1.xPos;\r\n    var x2 = pArray2.xPos;\r\n    var y1 = pArray1.yPos;\r\n    var y2 = pArray2.yPos;\r\n    var xOffset = x1-x2;\r\n    var yOffset = y1-y2;\r\n    var width1 = pArray1.width;\r\n    var height1 = pArray1.height;\r\n    var width2 = pArray2.width;\r\n    var height2 = pArray2.height;\r\n    \r\n    var startI = Math.max(0, x2-x1);\r\n    var startJ = Math.max(0, y2-y1);\r\n    var endX = Math.min(x1+pArray1.width, x2+pArray2.width);\r\n    var length = Math.max(0, endX-startI);\r\n    var endY = Math.min(y1+pArray1.height, y2+pArray2.height);\r\n    var height = Math.max(0, endY-startJ);\r\n    \r\n    if (blendOp === null){\r\n      blendOp = (pixel1, pixel2) => {return BlendModes.Over(pixel1, pixel2);};\r\n    }\r\n    else if (typeof(blendOp) === \"string\"){\r\n      blendOp = blendOp.toLowerCase();\r\n      if (blendOp === \"overlay\"){\r\n        blendOp = (p1, p2) => {return BlendModes.Overlay(p1, p2);};\r\n      }\r\n      else if(blendOp === 'over' || blendOp === 'normal'){\r\n        blendOp = (p1, p2) => {return BlendModes.Over(p1, p2);};\r\n      }\r\n      else if (blendOp === 'screen'){\r\n        blendOp = (p1, p2) => {return BlendModes.Screen(p1, p2);};\r\n      }\r\n      else if (blendOp === 'multiply'){\r\n        blendOp = (p1, p2) => {return BlendModes.Multiply(p1, p2);};\r\n      }\r\n    }\r\n\r\n    //console.log(blendOp);\r\n    \r\n    let theArray = null;\r\n    if(newArray === null){\r\n      theArray = new Uint8ClampedArray(pArray1.arr);\r\n    }\r\n    else{\r\n      theArray = newArray;\r\n    }\r\n  \r\n    var pixel1 = null;\r\n    var pixel2 = null;\r\n    var newValue = null;\r\n    \r\n    var newR = 0;\r\n    var newG = 0;\r\n    var newB = 0;\r\n    var newA = 0;\r\n    var coeff = 0;\r\n    var newColor = [];\r\n    var otherCoeff = 0;\r\n\r\n    /*\r\n    console.log('startI = ' + startI);\r\n    console.log('startJ = ' + startJ);\r\n    console.log('height = ' + height);\r\n    console.log('length = ' + length);\r\n    */\r\n    for(let i = startI; i < startI+length; i += 1 ){\r\n      for(let j = startJ; j < startJ+height; j += 1){\r\n        pixel1 = getColorValue(i, j, width1, theArray);\r\n        pixel2 = getColorValue(i+xOffset, j+yOffset, width2, pArray2.arr);\r\n        \r\n        if (blendOp === null){\r\n          if (pixel2[3] >= 254){\r\n            setColorValue(i, j, width1, theArray, pixel2);\r\n          }\r\n          else{\r\n            newColor = blendOp(pixel1, pixel2);\r\n            setColorValue(i, j, width1, theArray, newColor);\r\n          }\r\n        }\r\n        else{\r\n          newValue = blendOp(pixel1, pixel2);\r\n          setColorValue(i, j, width1, theArray, newValue);\r\n        }\r\n      }\r\n    } \r\n    \r\n    pArray2.xPos = pArray2.xPos - xMove;\r\n    pArray2.yPos = pArray2.yPos - yMove;\r\n\r\n    return theArray;\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pArray \r\n * @param {PixelArray} maskArray \r\n * @param {function} maskFunc \r\n */\r\nexport function MaskPArray(pArray, maskArray, maskFunc){\r\n  if (!maskFunc){\r\n    maskFunc = BlendMaskModes.AlphaMaskMode;\r\n  }\r\n\r\n  const newPArray = new PixelArray(null, pArray.width, pArray.height);\r\n\r\n  return blendColorLayersPArray(pArray, maskArray, maskFunc);\r\n}\r\n\r\n//#region Interop\r\nfunction imgToImgDataWrapper(img, imageDataW){\r\n  var canvas = document.createElement('canvas');\r\n  var context = canvas.getContext('2d');\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n  \r\n  try {\r\n    context.drawImage(img, 0, 0 );\r\n    imageDataW.imageData = context.getImageData(0, 0, img.width, img.height);\r\n  }\r\n  catch (err){\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nfunction imgToImgData(img, imageData=null){\r\n  var canvas = document.createElement('canvas');\r\n  var context = canvas.getContext('2d');\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n  context.drawImage(img, 0, 0 );\r\n  try {\r\n    return context.getImageData(0, 0, img.width, img.height);\r\n  }\r\n  catch (err){\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\nexport function AlphaCompositionMask(pixelArray, alphaArray, minAlpha=254){\r\n  for(let i = 0; i < pixelArray.width; i += 1){\r\n    for(let j = 0; j < pixelArray.height; j += 1){\r\n      if (alphaArray.getColorValue(i, j)[3] <= minAlpha){\r\n        pixelArray.setColorValue(i, j, [0, 0, 0, 0])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function AlphaCompositionMaskNew(pixelArray, alphaArray, minAlpha=254){\r\n  let resultArray = new PixelArray(null, pixelArray.width, pixelArray.height);\r\n\r\n  for(let i = 0; i < pixelArray.width; i += 1){\r\n    for(let j = 0; j < pixelArray.height; j += 1){\r\n      if (alphaArray.getColorValue(i, j)[3] >= minAlpha){\r\n        resultArray.setColorValue(i, j, pixelArray.getColorValue(i, j));\r\n      }\r\n    }\r\n  }\r\n  return resultArray;\r\n}\r\n\r\nexport {imgToImgDataWrapper, imgToImgData, scaleImageData, blendColorLayers};","import { PixelArray } from \"./PixelArray.js\";\r\nimport * as PixelUtils from \"./PixelUtils.js\";\r\n\r\n//switch\r\nexport class HSVMod{\r\n    /**\r\n     * \r\n     * @param {*} name \r\n     * @param {*} values \r\n     * @param {*} tags \r\n     */\r\n    constructor(name, values, tags=[]){\r\n        this.name = name;\r\n        this.hsv = {h: values[0], s: values[1], v: values[2]};\r\n        this.tags = tags;\r\n    }\r\n}\r\n\r\n/**\r\n * returns h [0, 360), s [0, 100), v [0, 100)\r\n * \r\n * @param {Array<int>} color \r\n * @returns \r\n */\r\n\r\nexport function rgb_to_hsv(color) {\r\n    let r = color[0];\r\n    let g = color[1];\r\n    let b = color[2];\r\n \r\n    // R, G, B values are divided by 255\r\n    // to change the range from 0..255 to 0..1\r\n    r = r / 255.0;\r\n    g = g / 255.0;\r\n    b = b / 255.0;\r\n\r\n    // h, s, v = hue, saturation, value\r\n    var cmax = Math.max(r, Math.max(g, b)); // maximum of r, g, b\r\n    var cmin = Math.min(r, Math.min(g, b)); // minimum of r, g, b\r\n    var diff = cmax - cmin; // diff of cmax and cmin.\r\n    var h = -1, s = -1;\r\n\r\n    // if cmax and cmax are equal then h = 0\r\n    if (cmax === cmin)\r\n        h = 0;\r\n\r\n    // if cmax equal r then compute h\r\n    else if (cmax === r)\r\n        h = (60 * ((g - b) / diff) + 360) % 360;\r\n\r\n    // if cmax equal g then compute h\r\n    else if (cmax === g)\r\n        h = (60 * ((b - r) / diff) + 120) % 360;\r\n\r\n    // if cmax equal b then compute h\r\n    else if (cmax === b)\r\n        h = (60 * ((r - g) / diff) + 240) % 360;\r\n\r\n    // if cmax equal zero\r\n    if (cmax === 0)\r\n        s = 0;\r\n    else\r\n        s = (diff / cmax) * 100;\r\n\r\n    // compute v\r\n    let v = cmax * 100;\r\n    \r\n    return [h, s, v];\r\n}\r\n\r\n/**\r\n * Hsv should be [0, 360), [0, 100) and \r\n * \r\n * returns an Array of RGB values\r\n * \r\n * @param {Array<int>} hsv \r\n * @returns {<Array<Number>}\r\n */\r\nexport function hsv_to_rgb(hsv){\r\n    //0 <= h, s, v <= 1 needs to be\r\n\r\n    let h = hsv[0];\r\n    let s = hsv[1];\r\n    let v = hsv[2];\r\n\r\n    h = h/360;\r\n    s = s/100;\r\n    v = v/100;\r\n\r\n    let r, g, b, i, f, p, q, t;\r\n    if (arguments.length === 1) {\r\n        s = h.s, v = h.v, h = h.h;\r\n    }\r\n    i = Math.floor(h * 6);\r\n    f = h * 6 - i;\r\n    p = v * (1 - s);\r\n    q = v * (1 - f * s);\r\n    t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n        case 0: r = v, g = t, b = p; break;\r\n        case 1: r = q, g = v, b = p; break;\r\n        case 2: r = p, g = v, b = t; break;\r\n        case 3: r = p, g = q, b = v; break;\r\n        case 4: r = t, g = p, b = v; break;\r\n        case 5: r = v, g = p, b = q; break;\r\n    }\r\n    return [\r\n        Math.round(r * 255),\r\n        Math.round(g * 255),\r\n        Math.round(b * 255)\r\n    ];\r\n}\r\n\r\n\r\n\r\nexport function hsv2rgb(hsv) { \r\n    let h = hsv[0];\r\n    let s = hsv[1]/100;\r\n    let v = hsv[2]/100;                       \r\n    let f= (n,k=(n+h/60)%6) => v - v*s*Math.max( Math.min(k,4-k,1), 0);     \r\n    return [f(5)*255,f(3)*255,f(1)*255];       \r\n}   \r\n\r\n/**\r\n * \r\n * @param {Array<int>} rgb \r\n * @param {Number} hueMod \r\n * @param {Number} saturateMod \r\n * @param {Number} valueMod \r\n * @returns {Array<Number>} an array of new RGB values\r\n */\r\nexport function HSVModSinglePixel(rgb, hueMod, saturateMod, valueMod){\r\n    let hsv = rgb_to_hsv(rgb);\r\n\r\n    hsv[0] = hueMod;\r\n    \r\n    hsv[1] = Math.min(Math.max((hsv[1] + saturateMod), 0), 100);\r\n    \r\n    hsv[2] = Math.min(Math.max((hsv[2] + valueMod), 0 ), 100);\r\n    let newRGB3 = hsv2rgb(hsv);\r\n\r\n    let newRGB = [newRGB3[0], newRGB3[1], newRGB3[2], rgb[3]];\r\n\r\n    return newRGB;\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pArray \r\n * @return {PixelArray}\r\n */\r\nexport function HSVModPixelArray(pArray, hueMod, saturateMod, valueMod){\r\n    let hsv = [];\r\n    let newRGB = [];\r\n    const width = pArray.width;\r\n    const array = pArray.array;\r\n    const newArray = new PixelArray(null, width, pArray.height);\r\n    for(let i = 0; i < width; i += 1){\r\n        for(let j = 0; j < pArray.height; j += 1){\r\n            hsv = PixelUtils.getColorValue(i, j, width, array);\r\n\r\n            hsv[0] = (hsv[0] + hueMod)%360;\r\n            hsv[1] = Math.min(Math.max((hsv[1] + saturateMod), 0), 100);\r\n            hsv[2] = Math.min(Math.max((hsv[2] + valueMod), 0 ), 100);\r\n\r\n            newRGB = hsv_to_rgb(hsv);\r\n\r\n            PixelUtils.setColorValue(i, j, width, newArray.array, newRGB);\r\n        }\r\n    }\r\n    \r\n    return newArray;\r\n}\r\n\r\n/**\r\n * @param {PixelArray} pArray \r\n * @param {hue} Number\r\n * @param {saturate} Number\r\n * @param {valueMod} Number\r\n * @returns {PixelArray}\r\n */\r\nexport function HSVSaturate(pArray, hue, saturate, valueMod){\r\n    let hsv = [];\r\n    let rgb = [];\r\n    let newRGB = [];\r\n    let newRGB3 = [];\r\n    const width = pArray.width;\r\n    const array = pArray.array;\r\n    const newPArray = new PixelArray(null, width, pArray.height);\r\n    for(let i = 0; i < width; i += 1){\r\n        //console.log(i);\r\n        for(let j = 0; j < pArray.height; j += 1){\r\n            \r\n            rgb = PixelUtils.getColorValue(i, j, width, array);\r\n\r\n            hsv = rgb_to_hsv(rgb);\r\n\r\n            hsv[0] = hue;\r\n            hsv[1] = Math.min(Math.max(saturate, 0), 100);\r\n            hsv[2] = Math.min(Math.max((hsv[2] + valueMod), 0 ), 100);\r\n            newRGB3 = hsv2rgb(hsv);\r\n\r\n            newRGB = [newRGB3[0], newRGB3[1], newRGB3[2], rgb[3]];\r\n\r\n            //console.log(newRGB);\r\n\r\n            PixelUtils.setColorValue(i, j, width, newPArray.arr, newRGB);\r\n        }\r\n        //console.log( PixelUtils.getColorValue(0, j, width, newPArray.arr) );\r\n    }\r\n\r\n    return newPArray;\r\n}","import { getColorValue, setColorValue } from \"./PixelUtils.js\";\r\n//import * as Utils from \"./Utils.js\";\r\nimport * as BlendModes from \"./BlendModes.js\";\r\nimport { PixelArray } from \"./PixelArray.js\";\r\n\r\n/*\r\nclass PixelArray{\r\n  constructor(array, initWidth, initHeight=null, xPos=0, yPos=0){\r\n    this.array = array;\r\n\r\n    this.width=initWidth;\r\n    \r\n    if (initWidth !== null){\r\n      this.height = array.length/(initWidth*4);\r\n    }\r\n    else{\r\n      this.height=initHeight;\r\n    }\r\n    this.xPos = xPos;\r\n    this.yPos = yPos;\r\n\r\n    this.xMin = xPos;\r\n    this.xMax = xPos+this.width;\r\n    this.yMin = yPos;\r\n    this.yMax = yPos+this.height;\r\n\r\n    this.bounds = new Utils.Bounds(array, initWidth);\r\n  }\r\n\r\n  //alias\r\n  get arr(){\r\n    return this.array;\r\n  };\r\n}\r\n*/\r\n\r\nclass BoundsHelper {\r\n  constructor(startI, startJ, endX, endY, length, height) {\r\n    this.startI = startI;\r\n    this.startJ = startJ;\r\n    this.endX = endX;\r\n    this.endY = endY;\r\n    this.length = length;\r\n    this.height = height;\r\n  }\r\n}\r\n\r\nfunction getBoundsForComp(pArray1, pArray2) {\r\n  var x1 = pArray1.xPos;\r\n  var x2 = pArray2.xPos;\r\n  var y1 = pArray1.yPos;\r\n  var y2 = pArray2.yPos;\r\n  var xOffset = x1 - x2;\r\n  var yOffset = y1 - y2;\r\n  var width1 = pArray1.width;\r\n  var height1 = pArray1.height;\r\n  var width2 = pArray2.width;\r\n  var height2 = pArray2.height;\r\n\r\n  var startI = Math.max(0, x2 - x1);\r\n  var startJ = Math.max(0, y2 - y1);\r\n  var endX = Math.min(x1 + pArray1.width, x2 + pArray2.width);\r\n  var length = Math.max(0, x1 - endX);\r\n  var endY = Math.min(y1 + pArray1.height, y2 + pArray2.height);\r\n  var height = Math.max(0, y1 - endY);\r\n\r\n  return new BoundsObject(startI, startJ, endX, endY, length, height);\r\n}\r\n\r\nfunction scaleImageData(imageData, scale) {\r\n  var scaled = ctx.createImageData(\r\n    imageData.width * scale,\r\n    imageData.height * scale\r\n  );\r\n  var subLine = ctx.createImageData(scale, 1).data;\r\n  for (var row = 0; row < imageData.height; row++) {\r\n    for (var col = 0; col < imageData.width; col++) {\r\n      var sourcePixel = imageData.data.subarray(\r\n        (row * imageData.width + col) * 4,\r\n        (row * imageData.width + col) * 4 + 4\r\n      );\r\n      for (var x = 0; x < scale; x++) subLine.set(sourcePixel, x * 4);\r\n      for (var y = 0; y < scale; y++) {\r\n        var destRow = row * scale + y;\r\n        var destCol = col * scale;\r\n        scaled.data.set(subLine, (destRow * scaled.width + destCol) * 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  return scaled;\r\n}\r\n\r\nfunction blendColorTransform(\r\n  pArray1,\r\n  pArray2,\r\n  xMove = 0,\r\n  yMove = 0,\r\n  blendOp = null,\r\n  newArray = null\r\n) {\r\n  pArray2.xPos = pArray2.xPos + xMove;\r\n  pArray2.yPos = pArray2.yPos + yMove;\r\n  var theArray = blendColorLayers(pArray1, pArray2, blendOp, newArray);\r\n  pArray2.xPos = pArray2.xPos - xMove;\r\n  pArray2.yPos = pArray2.yPos - yMove;\r\n  return theArray;\r\n}\r\n\r\n/**\r\n *\r\n * @param {PixelArray} pArray1\r\n * @param {PixelArray} pArray2\r\n * @param {*} blendOp\r\n * @param {Uint8ClampedArray} newArray\r\n * @param {*} xMove\r\n * @param {*} yMove\r\n * @returns {Uint8ClampedArray}\r\n */\r\nfunction blendColorLayers(\r\n  pArray1,\r\n  pArray2,\r\n  blendOp = null,\r\n  newArray = null,\r\n  xMove = 0,\r\n  yMove = 0\r\n) {\r\n  pArray2.xPos = pArray2.xPos + xMove;\r\n  pArray2.yPos = pArray2.yPos + yMove;\r\n\r\n  var x1 = pArray1.xPos;\r\n  var x2 = pArray2.xPos;\r\n  var y1 = pArray1.yPos;\r\n  var y2 = pArray2.yPos;\r\n  var xOffset = x1 - x2;\r\n  var yOffset = y1 - y2;\r\n  var width1 = pArray1.width;\r\n  var height1 = pArray1.height;\r\n  var width2 = pArray2.width;\r\n  var height2 = pArray2.height;\r\n\r\n  var startI = Math.max(0, x2 - x1);\r\n  var startJ = Math.max(0, y2 - y1);\r\n  var endX = Math.min(x1 + pArray1.width, x2 + pArray2.width);\r\n  var length = Math.max(0, endX - startI);\r\n  var endY = Math.min(y1 + pArray1.height, y2 + pArray2.height);\r\n  var height = Math.max(0, endY - startJ);\r\n\r\n  if (blendOp === null) {\r\n    blendOp = (pixel1, pixel2) => {\r\n      return BlendModes.Over(pixel1, pixel2);\r\n    };\r\n  } else if (typeof blendOp === \"string\") {\r\n    blendOp = blendOp.toLowerCase();\r\n    if (blendOp === \"overlay\") {\r\n      blendOp = (p1, p2) => {\r\n        return BlendModes.Overlay(p1, p2);\r\n      };\r\n    } else if (blendOp === \"over\" || blendOp === \"normal\") {\r\n      blendOp = (p1, p2) => {\r\n        return BlendModes.Over(p1, p2);\r\n      };\r\n    } else if (blendOp === \"screen\") {\r\n      blendOp = (p1, p2) => {\r\n        return BlendModes.Screen(p1, p2);\r\n      };\r\n    } else if (blendOp === \"multiply\") {\r\n      blendOp = (p1, p2) => {\r\n        return BlendModes.Multiply(p1, p2);\r\n      };\r\n    }\r\n  }\r\n\r\n  var theArray = null;\r\n  if (newArray === null) {\r\n    theArray = new Uint8ClampedArray(pArray1.arr);\r\n  } else {\r\n    theArray = newArray;\r\n  }\r\n\r\n  var pixel1 = null;\r\n  var pixel2 = null;\r\n  var newValue = null;\r\n\r\n  var newR = 0;\r\n  var newG = 0;\r\n  var newB = 0;\r\n  var newA = 0;\r\n  var coeff = 0;\r\n  var newColor = [];\r\n  var otherCoeff = 0;\r\n  for (var i = startI; i < startI + length; i += 1) {\r\n    for (var j = startJ; j < startJ + height; j += 1) {\r\n      pixel1 = getColorValue(i, j, width1, theArray);\r\n      pixel2 = getColorValue(i + xOffset, j + yOffset, width2, pArray2.arr);\r\n\r\n      if (blendOp === null) {\r\n        if (pixel2[3] >= 254) {\r\n          setColorValue(i, j, width1, theArray, pixel2);\r\n        } else {\r\n          newColor = blendOp(pixel1, pixel2);\r\n          setColorValue(i, j, width1, theArray, newColor);\r\n        }\r\n      } else {\r\n        newValue = blendOp(pixel1, pixel2);\r\n        setColorValue(i, j, width1, theArray, newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  pArray2.xPos = pArray2.xPos - xMove;\r\n  pArray2.yPos = pArray2.yPos - yMove;\r\n\r\n  return theArray;\r\n}\r\n\r\n//#region Interop\r\nfunction imgToImgDataWrapper(img, imageDataW) {\r\n  var canvas = document.createElement(\"canvas\");\r\n  var context = canvas.getContext(\"2d\");\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n\r\n  try {\r\n    context.drawImage(img, 0, 0);\r\n    imageDataW.imageData = context.getImageData(0, 0, img.width, img.height);\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nfunction imgToImgData(img, imageData = null) {\r\n  var canvas = document.createElement(\"canvas\");\r\n  var context = canvas.getContext(\"2d\");\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n  context.drawImage(img, 0, 0);\r\n  try {\r\n    return context.getImageData(0, 0, img.width, img.height);\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\nexport function AlphaCompositionMask(pixelArray, alphaArray, minAlpha = 254) {\r\n  for (let i = 0; i < pixelArray.width; i += 1) {\r\n    for (let j = 0; j < pixelArray.height; j += 1) {\r\n      if (alphaArray.getColorValue(i, j)[3] <= minAlpha) {\r\n        pixelArray.setColorValue(i, j, [0, 0, 0, 0]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function AlphaCompositionMaskNew(\r\n  pixelArray,\r\n  alphaArray,\r\n  minAlpha = 254\r\n) {\r\n  let resultArray = new PixelArray(null, pixelArray.width, pixelArray.height);\r\n\r\n  for (let i = 0; i < pixelArray.width; i += 1) {\r\n    for (let j = 0; j < pixelArray.height; j += 1) {\r\n      if (alphaArray.getColorValue(i, j)[3] >= minAlpha) {\r\n        resultArray.setColorValue(i, j, pixelArray.getColorValue(i, j));\r\n      }\r\n    }\r\n  }\r\n  return resultArray;\r\n}\r\n\r\nexport { imgToImgDataWrapper, imgToImgData, scaleImageData, blendColorLayers };\r\n","import { PixelArray } from \"./PixelArray.js\";\r\n\r\n/** Base function for loading an image from a url, returns a promise.\r\n * \r\n * @param {String} url \r\n * @returns {Promise}\r\n */\r\nexport function loadImage(url, setAnonymous=false){\r\n  return new Promise( (resolve, reject) =>{\r\n    const image = new Image();\r\n    if (setAnonymous){\r\n      image.crossOrigin = 'anonymous';\r\n    }\r\n    \r\n    image.onload = () => resolve(image);\r\n    image.onerror = () => reject(new Error(\"Couldn't load image!\"));\r\n    image.src = url;\r\n\r\n  });\r\n}\r\n\r\n/** Async code for loading an image from a url.\r\n * \r\n * @param {String} url \r\n * @param {Function} callback \r\n * @param {HTMLElement} element \r\n * @returns {PixelArray}\r\n */\r\nexport async function AsyncUrlToPixelArray(url, setAnonymous=false){\r\n  try{\r\n    let image = await loadImage(url, setAnonymous);\r\n    console.log(image.width);\r\n    return ImgToPixelArray(image, null, null);\r\n  }\r\n  catch(err){\r\n    console.log(\"couldn't load image async!\");\r\n  }\r\n}\r\n\r\n/** Async function for loading an image from a URL. Returns a PixelArray by default.  If a callback is specified,\r\n * the function can return either the result from the callback or the PixelArray.\r\n * \r\n * @param {String} url \r\n * @param {Function} callback\r\n * @param {Boolean} returnFromCallback\r\n */\r\nexport async function AsyncUrlToPixelArrayCallback(url, callback=null, returnFromCallback=false){\r\n  try{\r\n    let image = await loadImage(url);\r\n    const pixelArray = ImgToPixelArray(image);\r\n    if (callback){\r\n      const result = callback(pixelArray);\r\n      if (returnFromCallback){\r\n        return result;\r\n      }\r\n      else{\r\n        return pixelArray;\r\n      }\r\n    }\r\n    else{\r\n      return pixelArray;\r\n    }\r\n  }\r\n  catch(err){\r\n    console.log(err);\r\n  }\r\n}\r\n  \r\n/** Takes an HTMLImageElement then converts it to a PixelArray. \r\n * \r\n * @param {HTMLImageElement} img \r\n * @param {ImageData} imageData \r\n * @param {String} elementName \r\n * @returns {PixelArray}\r\n */ \r\nexport function ImgToPixelArray(img, imageData=null, elementName=null){\r\n  try {\r\n      /** @type {HTMLCanvasElement} */\r\n      let canvas = document.createElement('canvas');\r\n      let context = canvas.getContext('2d');\r\n\r\n      //document.body.append(canvas);\r\n      if (elementName){\r\n        document.getElementById(elementName).append(canvas);\r\n      }\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      context.drawImage(img, 0, 0 );\r\n      const imgData = context.getImageData(0, 0, img.width, img.height);\r\n      const pixelArray = new PixelArray(imgData.data, img.width);\r\n      //canvas.remove();\r\n      return pixelArray;\r\n  }\r\n  catch (err){\r\n    console.log(\"error!\");\r\n    console.log(img.src);\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n/** Returns a promise that you can .then and do a callback\r\n * \r\n * @param {*} urls \r\n * @returns \r\n */\r\nexport async function AsyncUrlsToImages(urls){\r\n  const results = await Promise.allSettled( urls.map( url => {\r\n    return loadImage(url); \r\n  }));\r\n\r\n  return results;\r\n}\r\n\r\n/** Returns a promise that you can .then and do a callback\r\n * \r\n * @param {Array<String>} urls \r\n * @returns \r\n */\r\n export async function AsyncUrlsToPixelArrays(urls){\r\n  const results = await Promise.allSettled( urls.map( url => {\r\n    console.log(url);\r\n    return loadImage(url).then(value => ImgToPixelArray(value));\r\n  }));\r\n\r\n  return results;\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {Array<string>} urls \r\n * @param {function} finalCallback\r\n */\r\nexport async function AsyncUrlsToPixelArrayCallback(urls, finalCallbackTemplate){\r\n    try{\r\n        \r\n        const pixelArrayList = [];\r\n\r\n        let finalCallback = () => {\r\n            finalCallbackTemplate(pixelArrayList);\r\n        }\r\n\r\n        const locks = new Locks(urls.length, finalCallback);\r\n\r\n        let callbackTemplate = (i, pixelArray) => {\r\n            locks.unlock(i);\r\n            pixelArrayList[i] = pixelArray;\r\n            console.log(pixelArrayList[i]);\r\n            console.log(pixelArray.getColorValue(3, 3));\r\n        }\r\n\r\n        for(let i = 0; i < urls.length; i += 1){\r\n            pixelArrayList.push(null);\r\n\r\n            let curCallback = (pixelArray) => {\r\n                callbackTemplate(i, pixelArray);\r\n            }\r\n\r\n            AsyncUrlToPixelArrayCallback(urls[i], curCallback)\r\n        }\r\n    } \r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n\r\n/** Creates a canvas and puts a PixelArray there.\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {Int} zoom \r\n * @returns {HTMLCanvasElement}\r\n */\r\nexport function PixelArrayToCanvas(pixelArray, zoom=1){\r\n  /** @type {HTMLCanvasElement} */\r\n  const canvas = document.createElement('canvas');\r\n  const context = canvas.getContext('2d');\r\n  \r\n  const imgData = new ImageData(pixelArray.arr, pixelArray.width);\r\n\r\n  //console.log(img.width);\r\n  canvas.width = pixelArray.width*zoom;\r\n  canvas.height = pixelArray.height*zoom;\r\n  context.putImageData(imgData, 0, 0);\r\n\r\n  return canvas;\r\n}\r\n\r\n\r\n//#region old\r\nexport class Locks{\r\n  constructor(numLocks, callback){\r\n      /**\r\n       * \r\n       */\r\n      this._unlocked = [];\r\n      for(let i = 0; i < numLocks; i += 1){\r\n        this._unlocked.push(false);\r\n      }\r\n      this.callback = callback;\r\n  }\r\n\r\n  unlock(index){\r\n      this._unlocked[index] = true;\r\n      if (this._unlocked.includes(false)){\r\n      return;\r\n      }\r\n      else{\r\n          this.callback();\r\n      }\r\n  }\r\n}\r\n//#endregion","import { PixelArray } from \"./PixelArray.js\";\r\n\r\nexport function EnlargeCanvasStretch(pixelArray, left, right, bottom, top){\r\n\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {*} left \r\n * @param {*} right \r\n * @param {*} bottom \r\n * @param {*} top \r\n * @return {PixelArray}\r\n */\r\nexport function EnlargeCanvasEmpty(pixelArray, left, right, bottom, top){\r\n    const width = pixelArray.width + left + right;\r\n    const height = pixelArray.height + bottom + top;\r\n\r\n    const newPixelArray = new PixelArray(null, width, height);\r\n\r\n    for(let i = 0; i < pixelArray.width; i += 1){\r\n        for(let j = 0; j < pixelArray.height; j += 1){\r\n            const newI = i + left;\r\n            const newJ = j + top;\r\n\r\n            const color = pixelArray.getColorValue(i, j);\r\n            newPixelArray.setColorValue(i, j, color);\r\n        }\r\n    }\r\n\r\n    return newPixelArrays;\r\n}","import { PixelArray } from \"./PixelArray.js\";\r\n\r\n/**\r\n * \r\n * @param {Array<PixelArray>} listPixelArrays \r\n */\r\nexport function GetDuplicateIslands(listPixelArrays){\r\n    const sizes = [];\r\n    const sets = [];\r\n    s\r\n    const firstPixelArray = listPixelArrays[0];\r\n\r\n    sizes.push( {width: firstPixelArray.width, height: firstPixelArray.height});\r\n    sets.push( [firstPixelArray] );\r\n    \r\n    for(let i = 1; i < listPixelArrays.length; i += 1){\r\n        const curPixelArray = listPixelArrays[i];\r\n        let added = false;\r\n        for(let j = 0; j < sizes.length; j += 1){\r\n            const curSize = sizes[j];\r\n            if( curSize.width === curPixelArray.width && curSize.height === curPixelArray.height){\r\n                added = true;\r\n                sets[j].push(curPixelArray);\r\n                break;\r\n            }\r\n        }\r\n        if (!added){\r\n            sizes.push( {width: curPixelArray.width, height: curPixelArray.height});\r\n            sets.push( [curPixelArray] );\r\n        }\r\n    }\r\n\r\n    return sets;\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @returns {Array<Int>} color\r\n */\r\nexport function GetColorFromIslandPArray(pixelArray){\r\n    //\r\n    for(let i = 0; i < pixelArray.width; i += 1){\r\n        for(let j = 0; j < pixelArray.height; j += 1){\r\n            //\r\n            const color = pixelArray.getColorValue(i, j);\r\n            if (color[3] >= 1){\r\n                return color;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n/**Returns an array of arrays of int\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @return {Array<Array<Int>>}\r\n */\r\nexport function PixelArrayToIslands(pixelArray, anyColor=false, testAlpha=true, minAlpha=1){\r\n    const width = pixelArray.width;\r\n    const height = pixelArray.height;\r\n\r\n    console.log(width + ', ' + height);\r\n\r\n    const visitedArray = new Uint8ClampedArray(width*height);\r\n\r\n    let curIndex = 0;\r\n\r\n    const islands = [];\r\n    //let curIsland = null;\r\n    //let placesToVisit = [];\r\n    \r\n    for(let i = 0; i < pixelArray.width; i += 1){\r\n        for(let j = 0; j < pixelArray.height; j += 1){\r\n\r\n            if (visitedArray[i+j*width] !== 0){\r\n                continue;\r\n            }\r\n            //console.log(pixelArray.getColorValue(i, j)[3]);\r\n            \r\n            if (pixelArray.getColorValue(i, j)[3] >= minAlpha){\r\n                const curIsland = FloodFillSelect(pixelArray, i, j, visitedArray, anyColor=false, testAlpha=true);\r\n                visitedArray[i+j*width] = 1;\r\n                islands.push(curIsland);\r\n            }\r\n        }\r\n    }\r\n    return islands;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array<Array<Int>>} islandArray \r\n * @return {Array<Int>} returns bounds [xMin, xMax, yMin, yMax]\r\n */\r\nexport function GetIslandBounds(islandArray){\r\n    let [xMin, xMax, yMin, yMax] = [100000, -100000, 100000, -100000];\r\n\r\n    for(let i = 0; i < islandArray.length; i += 1){\r\n        const x = islandArray[i][0];\r\n        const y = islandArray[i][1];\r\n\r\n        if (x < xMin){\r\n            xMin = x;\r\n        }\r\n        if (x > xMax){\r\n            xMax = x;\r\n        }\r\n        if (y < yMin){\r\n            yMin = y;\r\n        }\r\n        if (y > yMax){\r\n            yMax = y;\r\n        }\r\n    }\r\n\r\n    return [xMin, xMax, yMin, yMax];\r\n}\r\n\r\n/** Returns an array of pixelArrays\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {Boolean} anyColor \r\n * @param {Boolean} testAlpha \r\n * @param {Int} minAlpha \r\n */\r\nexport function PixelArrayToPArrayIslands(pixelArray, anyColor=false, testAlpha=true, minAlpha=1){\r\n    const islands = PixelArrayToIslands(pixelArray, anyColor=false, testAlpha=true, minAlpha=1);\r\n    console.log(islands.length);\r\n    const island0 = islands[0];\r\n    \r\n    console.log(island0);\r\n    //\r\n\r\n    /**@type{Array<PixelArray>} */\r\n    const pixelArrays = [];\r\n    for( let i = 0; i < islands.length; i += 1){\r\n        const bounds = GetIslandBounds(islands[i]);\r\n\r\n        console.log(bounds);\r\n        \r\n        const xOffset = bounds[0];\r\n        const yOffset = bounds[2];\r\n        const width = bounds[1]-bounds[0]+1; //add 1 because the bounds are inclusive\r\n        const height = bounds[3]-bounds[2]+1; //add 1 because the bounds are inclusive\r\n\r\n        const curPixelArray = new PixelArray(null, width, height);\r\n\r\n        let oldX = -1;\r\n        let oldY = -1;\r\n        let curX = -1;\r\n        let curY = -1;\r\n        let curColor = null;\r\n        let newColor = null;\r\n        for(let j = 0; j < islands[i].length; j += 1){\r\n            //console.log(j);\r\n            curX = islands[i][j][0] - xOffset;\r\n            curY = islands[i][j][1] - yOffset;\r\n            oldX = islands[i][j][0];\r\n            oldY = islands[i][j][1];\r\n\r\n            //console.log(curX);\r\n            curColor = pixelArray.getColorValue(oldX, oldY);\r\n            //console.log(curColor);\r\n\r\n            newColor = [curColor[0], curColor[1], curColor[2], curColor[3]];\r\n\r\n            curPixelArray.xPos = xOffset;\r\n            curPixelArray.yPos = yOffset;\r\n\r\n            //\r\n            curPixelArray.setColorValue(curX, curY, newColor);\r\n        }\r\n\r\n        pixelArrays.push(curPixelArray);\r\n    }\r\n\r\n    return pixelArrays;\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {Int} x \r\n * @param {Int} y \r\n * @param {Array<Int>} visitedArray \r\n * @param {*} anyColor \r\n * @param {*} testAlpha \r\n * @param {*} minAlpha \r\n * @param {Boolean} noWhite \r\n * @returns \r\n */\r\nexport function FloodFillSelect(pixelArray, x, y, visitedArray=null, anyColor=false, testAlpha=false, minAlpha=1, noWhite=false){\r\n    /**@type{Array<Int>} */\r\n    const color = pixelArray.getColorValue(x, y);\r\n\r\n    //console.log(color);\r\n\r\n    // #region funcs\r\n    let func = (curColor) => {\r\n        if (curColor[0] !== color[0]){\r\n            return false;\r\n        }\r\n        if (curColor[1] !== color[1]){\r\n            return false;\r\n        }\r\n        if (curColor[2] !== color[2]){\r\n            return false;\r\n        }\r\n        if (testAlpha){\r\n            if (curColor[3] !== color[3]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    if (anyColor){\r\n        func = (curColor) => {\r\n            if(curColor[3] >= minAlpha){\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n    }\r\n    if (noWhite){\r\n        //func\r\n    }\r\n    //#endregion\r\n\r\n    const getIndex = (x, y, width) => {\r\n        return (x + y * width);\r\n    }\r\n    \r\n    const width = pixelArray.width;\r\n    const height = pixelArray.height;\r\n    let actualVisitedArray = visitedArray;\r\n    if (actualVisitedArray === null){\r\n        console.log('ava is null!');\r\n        for (let i = 0; i < width*height; i += 1){\r\n            actualVisitedArray.push(0);\r\n        }\r\n    }\r\n    const placesToVisit = [[x, y]];\r\n    const island = [[x, y]];\r\n    let iters = 0;\r\n    while (placesToVisit.length !== 0 && iters < 100000000){ \r\n        let curPlace = placesToVisit[0];\r\n        placesToVisit.splice(0, 1);\r\n\r\n        let curX = curPlace[0];\r\n        let curY = curPlace[1];\r\n\r\n        if (actualVisitedArray[getIndex(curX, curY, width)] === 1){\r\n            continue;\r\n        }\r\n        actualVisitedArray[getIndex(curX, curY, width)] = 1;\r\n        //console.log(visitedArray);\r\n        for(let a = -1; a < 2; a += 1){\r\n            let visitX = curX + a;\r\n            if (visitX < 0 || visitX >= width){\r\n                continue;\r\n            }\r\n\r\n            for(let b = -1; b < 2; b += 1){\r\n                let visitY = curY + b;\r\n\r\n                if (visitY < 0 || visitY >= height){\r\n                    continue;\r\n                }\r\n                const nextColor = pixelArray.getColorValue(visitX, visitY);\r\n                //actualVisitedArray[getIndex(visitX, visitY, width)] === 0\r\n                if (true){\r\n                    if (func(nextColor)){\r\n                        island.push([visitX, visitY]);\r\n    \r\n                        placesToVisit.push([visitX, visitY]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        iters += 1;\r\n    }\r\n    //console.log(iters);\r\n    return island;\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {Array<Array<Int>>} indices\r\n * @param {Array<Int>} color\r\n */\r\nexport function FloodFill(pixelArray, indices, color){\r\n    for(let i = 0; i < indices.length; i +=1){\r\n        const [x, y] = [...indices[i]];\r\n\r\n        pixelArray.setColorValue(x, y, color);\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {PixelArray} pixelArray \r\n * @param {Array<Array<Int>>} indices \r\n * @param {Array<Int>} color \r\n * @returns \r\n */\r\nexport function FloodFillNew(pixelArray, indices, color){\r\n    const newPixelArray = PixelArray.CopyPixelFactory(pixelArray);\r\n\r\n    FloodFill(newPixelArray, indices, color);\r\n\r\n    return newPixelArray;\r\n}"],"names":["getParamColor","color","get32Color","paramColor","Math","round","Over","color1","color2","pColor1","pColor2","a1","a2","divisor","r","g","b","a","OverCustomAlpha","customAlphaMultiplier","OverCustomAlphaExport","Overlay","customAlpha","p1","p2","newColor","valueUnit","min","i","push","color32","Screen","Multiply","Difference","abs","Darken","Lighten","max","SoftLight","HardLight","ColorDodge","ColorBurn","PinLight","getIndex","x","y","imagedataWidth","setColorValue","width","array","value","index","getColorValue","PixelArray","constructor","initWidth","initHeight","xPos","yPos","Uint8ClampedArray","height","length","xMin","xMax","yMin","yMax","xOffset","yOffset","arr","clip","x1","y1","x2","y2","j","copyFromArr","CopyPixelFactory","oldPixelArray","copyArray","from","CopyFactory","copyInto","otherPixelArray","bounds","curValue","fill","fillBox","fillColorValue","alphaMin","getFirstFoundColor","toCanvas","canvas","context","getContext","imgData","ImageData","putImageData","Offset","pArray","offsetPArray","newArr","oldArr","rgba","PixelUtils","scaleImageData","imageData","scale","scaled","ctx","createImageData","subLine","data","row","col","sourcePixel","subarray","set","destRow","destCol","blendColorLayersPArray","pArray1","pArray2","blendOp","newArray","xMove","yMove","resultArray","blendColorLayers","mask","width1","width2","startI","startJ","endX","endY","pixel1","pixel2","BlendModes","toLowerCase","theArray","newValue","MaskPArray","maskArray","maskFunc","BlendMaskModes","AlphaMaskMode","imgToImgDataWrapper","img","imageDataW","document","createElement","drawImage","getImageData","err","console","log","imgToImgData","AlphaCompositionMask","pixelArray","alphaArray","minAlpha","AlphaCompositionMaskNew","HSVMod","name","values","tags","hsv","h","s","v","rgb_to_hsv","cmax","cmin","diff","hsv_to_rgb","f","p","q","t","arguments","floor","hsv2rgb","n","k","HSVModSinglePixel","rgb","hueMod","saturateMod","valueMod","newRGB3","newRGB","HSVModPixelArray","HSVSaturate","hue","saturate","newPArray","loadImage","url","setAnonymous","Promise","resolve","reject","image","Image","crossOrigin","onload","onerror","Error","src","AsyncUrlToPixelArray","ImgToPixelArray","AsyncUrlToPixelArrayCallback","callback","returnFromCallback","result","elementName","getElementById","append","AsyncUrlsToImages","urls","results","allSettled","map","AsyncUrlsToPixelArrays","then","AsyncUrlsToPixelArrayCallback","finalCallbackTemplate","pixelArrayList","finalCallback","locks","Locks","callbackTemplate","unlock","curCallback","PixelArrayToCanvas","zoom","numLocks","_unlocked","includes","EnlargeCanvasStretch","left","right","bottom","top","EnlargeCanvasEmpty","newPixelArray","newPixelArrays","GetDuplicateIslands","listPixelArrays","sizes","sets","firstPixelArray","curPixelArray","added","curSize","GetColorFromIslandPArray","PixelArrayToIslands","anyColor","testAlpha","visitedArray","islands","curIsland","FloodFillSelect","GetIslandBounds","islandArray","PixelArrayToPArrayIslands","island0","pixelArrays","oldX","oldY","curX","curY","curColor","noWhite","func","actualVisitedArray","placesToVisit","island","iters","curPlace","splice","visitX","visitY","nextColor","FloodFill","indices","FloodFillNew"],"mappings":"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"}